============================= test session starts =============================
platform win32 -- Python 3.12.7, pytest-8.3.4, pluggy-1.5.0
rootdir: D:\Code\Python\pytreeprint
configfile: pyproject.toml
plugins: cov-6.0.0
collected 4 items

tests\test_tree.py FF.F                                                  [100%]

================================== FAILURES ===================================
____________________________ test_tree_generation _____________________________

test_directory = WindowsPath('C:/Users/soulwax/AppData/Local/Temp/pytest-of-soulwax/pytest-16/test_tree_generation0')

    def test_tree_generation(test_directory: Path) -> None:
        """Test basic tree generation functionality."""
        stats = TreeStats()
>       tree_output = generate_tree(
            directory=test_directory,
            stats=stats,
            show_size=True,
            show_date=True,
        )

tests\test_tree.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

directory = WindowsPath('C:/Users/soulwax/AppData/Local/Temp/pytest-of-soulwax/pytest-16/test_tree_generation0')

    def generate_tree(
        directory: Path,
        *,  # Ensure all additional params are keyword-only
        prefix: str = "",
        max_depth: Optional[int] = None,
        current_depth: int = 0,
        stats: Optional[TreeStats] = None,
        exclude_pattern: Optional[Pattern] = None,
        show_size: bool = False,
        show_date: bool = False,
        use_color: bool = False
    ) -> list[str]:
        """Generate a Windows-style ASCII tree structure for the given directory."""
        if stats is None:
            stats = TreeStats()
    
        lines = []
        items = list(directory.iterdir())
        files, dirs = process_directory_items(items, stats, exclude_pattern)
    
        # Process files
        for index, item in enumerate(files):
            is_last_item = (index == len(files) - 1) and not dirs
            lines.append(process_tree_node(
                item, prefix, is_last_item, show_size, show_date, use_color))
    
        # Process directories
        if max_depth is not None and current_depth >= max_depth:
            return lines
    
        for index, item in enumerate(dirs):
            is_last_item = index == len(dirs) - 1
>           lines.append(process_tree_node(
                item, prefix, is_last_item, show_size, show_date, use_color))
E           TypeError: process_tree_node() takes 2 positional arguments but 6 were given

pytreeprint\tree.py:137: TypeError
____________________________ test_ignore_patterns _____________________________

test_directory = WindowsPath('C:/Users/soulwax/AppData/Local/Temp/pytest-of-soulwax/pytest-16/test_ignore_patterns0')

    def test_ignore_patterns(test_directory: Path) -> None:
        """Test pattern-based file/directory ignoring."""
        pycache_dir = test_directory / "__pycache__"
        pycache_dir.mkdir()
        (pycache_dir / "module.cpython-39.pyc").write_text("")
    
        stats = TreeStats()
        pattern = compile_ignore_pattern(DEFAULT_IGNORE_PATTERNS)
>       tree_output = generate_tree(
            directory=test_directory,
            stats=stats,
            exclude_pattern=pattern,
        )

tests\test_tree.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

directory = WindowsPath('C:/Users/soulwax/AppData/Local/Temp/pytest-of-soulwax/pytest-16/test_ignore_patterns0')

    def generate_tree(
        directory: Path,
        *,  # Ensure all additional params are keyword-only
        prefix: str = "",
        max_depth: Optional[int] = None,
        current_depth: int = 0,
        stats: Optional[TreeStats] = None,
        exclude_pattern: Optional[Pattern] = None,
        show_size: bool = False,
        show_date: bool = False,
        use_color: bool = False
    ) -> list[str]:
        """Generate a Windows-style ASCII tree structure for the given directory."""
        if stats is None:
            stats = TreeStats()
    
        lines = []
        items = list(directory.iterdir())
        files, dirs = process_directory_items(items, stats, exclude_pattern)
    
        # Process files
        for index, item in enumerate(files):
            is_last_item = (index == len(files) - 1) and not dirs
            lines.append(process_tree_node(
                item, prefix, is_last_item, show_size, show_date, use_color))
    
        # Process directories
        if max_depth is not None and current_depth >= max_depth:
            return lines
    
        for index, item in enumerate(dirs):
            is_last_item = index == len(dirs) - 1
>           lines.append(process_tree_node(
                item, prefix, is_last_item, show_size, show_date, use_color))
E           TypeError: process_tree_node() takes 2 positional arguments but 6 were given

pytreeprint\tree.py:137: TypeError
_______________________________ test_max_depth ________________________________

test_directory = WindowsPath('C:/Users/soulwax/AppData/Local/Temp/pytest-of-soulwax/pytest-16/test_max_depth0')

    def test_max_depth(test_directory: Path) -> None:
        """Test max depth limitation."""
        nested = test_directory / "level1" / "level2" / "level3"
        nested.mkdir(parents=True)
        (nested / "deep_file.txt").write_text("deep")
        (test_directory / "level1" / "shallow_file.txt").write_text("shallow")
    
        stats = TreeStats()
>       tree_output = generate_tree(
            directory=test_directory,
            max_depth=1,
            stats=stats,
        )

tests\test_tree.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

directory = WindowsPath('C:/Users/soulwax/AppData/Local/Temp/pytest-of-soulwax/pytest-16/test_max_depth0')

    def generate_tree(
        directory: Path,
        *,  # Ensure all additional params are keyword-only
        prefix: str = "",
        max_depth: Optional[int] = None,
        current_depth: int = 0,
        stats: Optional[TreeStats] = None,
        exclude_pattern: Optional[Pattern] = None,
        show_size: bool = False,
        show_date: bool = False,
        use_color: bool = False
    ) -> list[str]:
        """Generate a Windows-style ASCII tree structure for the given directory."""
        if stats is None:
            stats = TreeStats()
    
        lines = []
        items = list(directory.iterdir())
        files, dirs = process_directory_items(items, stats, exclude_pattern)
    
        # Process files
        for index, item in enumerate(files):
            is_last_item = (index == len(files) - 1) and not dirs
            lines.append(process_tree_node(
                item, prefix, is_last_item, show_size, show_date, use_color))
    
        # Process directories
        if max_depth is not None and current_depth >= max_depth:
            return lines
    
        for index, item in enumerate(dirs):
            is_last_item = index == len(dirs) - 1
>           lines.append(process_tree_node(
                item, prefix, is_last_item, show_size, show_date, use_color))
E           TypeError: process_tree_node() takes 2 positional arguments but 6 were given

pytreeprint\tree.py:137: TypeError
=========================== short test summary info ===========================
FAILED tests/test_tree.py::test_tree_generation - TypeError: process_tree_nod...
FAILED tests/test_tree.py::test_ignore_patterns - TypeError: process_tree_nod...
FAILED tests/test_tree.py::test_max_depth - TypeError: process_tree_node() ta...
========================= 3 failed, 1 passed in 0.11s =========================
============================= test session starts =============================
platform win32 -- Python 3.12.7, pytest-8.3.4, pluggy-1.5.0
rootdir: D:\Code\Python\pytreeprint
configfile: pyproject.toml
plugins: cov-6.0.0
collected 4 items

tests\test_tree.py ....                                                  [100%]

============================== 4 passed in 0.04s ==============================
